{"text": "Prompt: Fix a Python error.\nError: IndexError at line 3\nMessage: list index out of range\nCode line: print(items[i])\nVariables: items\nIntent: loop, function\nCompletion: Corrected Code:\n```python\nfor i in range(len(items)):\n    print(items[i])\n```\nExplanation: The IndexError occurs because the index 'i' exceeds the list length. Using len(items) ensures valid indices.\nBest Practice: Check list bounds or use try-except."}
{"text": "Prompt: Fix a Python error.\nError: IndexError at line 5\nMessage: list index out of range\nCode line: value = array[i]\nVariables: array\nIntent: loop\nCompletion: Corrected Code:\n```python\ntry:\n    value = array[i]\nexcept IndexError:\n    value = None\n```\nExplanation: The IndexError is due to an invalid index. A try-except block handles the error gracefully.\nBest Practice: Use try-except for error-prone operations."}
{"text": "Prompt: Fix a Python error.\nError: IndexError at line 4\nMessage: list index out of range\nCode line: result = data[i]\nVariables: data\nIntent: function\nCompletion: Corrected Code:\n```python\nif i < len(data):\n    result = data[i]\n```\nExplanation: The IndexError occurs due to an out-of-bounds index. Checking the length prevents the error.\nBest Practice: Validate indices before accessing lists."}
{"text": "Prompt: Fix a Java error.\nError: NullPointerException at line 4\nMessage: Cannot invoke method on null object\nCode line: System.out.println(s.length());\nVariables: s\nIntent: function, class\nCompletion: Corrected Code:\n```java\nif (s != null) {\n    System.out.println(s.length());\n}\n```\nExplanation: The NullPointerException occurs because 's' is null. Checking for null prevents the error.\nBest Practice: Use null checks or Optional."}
{"text": "Prompt: Fix a Java error.\nError: NullPointerException at line 6\nMessage: null object\nCode line: obj.method();\nVariables: obj\nIntent: function\nCompletion: Corrected Code:\n```java\nobj = new Object(); // Initialize\nobj.method();\n```\nExplanation: The NullPointerException occurs due to an uninitialized object. Initializing 'obj' fixes it.\nBest Practice: Initialize objects at declaration."}
{"text": "Prompt: Fix a Java error.\nError: NullPointerException at line 5\nMessage: null reference\nCode line: str.toUpperCase();\nVariables: str\nIntent: method\nCompletion: Corrected Code:\n```java\nstr = str != null ? str.toUpperCase() : \"\";\n```\nExplanation: The NullPointerException occurs because 'str' is null. Using a ternary operator ensures safety.\nBest Practice: Use null-safe operations."}
{"text": "Prompt: Fix a C++ error.\nError: out_of_range at line 4\nMessage: vector index exceeds size\nCode line: int x = vec[10];\nVariables: vec\nIntent: function\nCompletion: Corrected Code:\n```cpp\nif (10 < vec.size()) {\n    int x = vec[10];\n}\n```\nExplanation: The out_of_range error occurs because the index exceeds the vector size. Checking the size prevents the error.\nBest Practice: Use at() for bounds checking."}
{"text": "Prompt: Fix a C++ error.\nError: out_of_range at line 5\nMessage: invalid vector index\nCode line: value = vector[5];\nVariables: vector\nIntent: function\nCompletion: Corrected Code:\n```cpp\nvalue = vector.at(5);\n```\nExplanation: The out_of_range error is due to an invalid index. Using at() provides bounds checking.\nBest Practice: Prefer at() over [] for safety."}
{"text": "Prompt: Fix a C++ error.\nError: out_of_range at line 6\nMessage: vector access out of bounds\nCode line: result = arr[8];\nVariables: arr\nIntent: loop\nCompletion: Corrected Code:\n```cpp\nresult = arr.at(8);\n```\nExplanation: The out_of_range error occurs due to an invalid index. The at() method checks bounds automatically.\nBest Practice: Use at() for safe vector access."}
